{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios'; // You can use any HTTP client like axios\n\nconst useUpdateProfile = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const updateProfile = async (formData, token) => {\n    setIsLoading(true);\n    setError(null); // Reset any previous errors\n\n    try {\n      const response = await axios.patch('https://app.spiralreports.com/api/users',\n      // Ensure this is the correct endpoint\n      {\n        firstName: formData.firstName,\n        middleName: formData.middleName,\n        lastName: formData.lastName,\n        email: formData.email,\n        phone: formData.phone,\n        company: formData.company,\n        // Pass company directly\n        industry: formData.industry || '',\n        // Empty string as fallback if industry is not provided\n        workRole: formData.workRole,\n        country: formData.country || '' // Same for country\n        // Removed password field from the request\n      }, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n\n      // Log and return the response data if needed\n      console.log('Profile updated successfully:', response.data);\n      return response.data; // Return response for further handling in the calling component\n    } catch (err) {\n      setError('Failed to update profile. Please try again.');\n\n      // Log error for debugging (you can customize the error message here)\n      console.error('Error details:', err.response ? err.response.data : err.message);\n\n      // Optionally, you can extract and display a more specific error message from the API response\n      if (err.response && err.response.data) {\n        setError(err.response.data.message || 'Failed to update profile.');\n      }\n\n      // Optionally, re-throw the error if you want the calling component to handle it\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    updateProfile,\n    isLoading,\n    error\n  };\n};\n_s(useUpdateProfile, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\nexport default useUpdateProfile;","map":{"version":3,"names":["useState","axios","useUpdateProfile","_s","isLoading","setIsLoading","error","setError","updateProfile","formData","token","response","patch","firstName","middleName","lastName","email","phone","company","industry","workRole","country","headers","Authorization","console","log","data","err","message"],"sources":["/Users/akmalkhan/chromablend/Spiralreports1/src/hooks/useUpdateProfile.js"],"sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';  // You can use any HTTP client like axios\n\nconst useUpdateProfile = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const updateProfile = async (formData, token) => {\n    setIsLoading(true);\n    setError(null);  // Reset any previous errors\n\n    try {\n      const response = await axios.patch(\n        'https://app.spiralreports.com/api/users',  // Ensure this is the correct endpoint\n        {\n          firstName: formData.firstName,\n          middleName: formData.middleName,\n          lastName: formData.lastName,\n          email: formData.email,\n          phone: formData.phone,\n          company: formData.company,  // Pass company directly\n          industry: formData.industry || '',  // Empty string as fallback if industry is not provided\n          workRole: formData.workRole,\n          country: formData.country || '',  // Same for country\n          // Removed password field from the request\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        }\n      );\n\n      // Log and return the response data if needed\n      console.log('Profile updated successfully:', response.data);\n      return response.data;  // Return response for further handling in the calling component\n    } catch (err) {\n      setError('Failed to update profile. Please try again.');\n      \n      // Log error for debugging (you can customize the error message here)\n      console.error('Error details:', err.response ? err.response.data : err.message);  \n\n      // Optionally, you can extract and display a more specific error message from the API response\n      if (err.response && err.response.data) {\n        setError(err.response.data.message || 'Failed to update profile.');\n      }\n\n      // Optionally, re-throw the error if you want the calling component to handle it\n      throw err;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return { updateProfile, isLoading, error };\n};\n\nexport default useUpdateProfile;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAE;;AAE5B,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMQ,aAAa,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,KAAK;IAC/CL,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAE;;IAEjB,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMV,KAAK,CAACW,KAAK,CAChC,yCAAyC;MAAG;MAC5C;QACEC,SAAS,EAAEJ,QAAQ,CAACI,SAAS;QAC7BC,UAAU,EAAEL,QAAQ,CAACK,UAAU;QAC/BC,QAAQ,EAAEN,QAAQ,CAACM,QAAQ;QAC3BC,KAAK,EAAEP,QAAQ,CAACO,KAAK;QACrBC,KAAK,EAAER,QAAQ,CAACQ,KAAK;QACrBC,OAAO,EAAET,QAAQ,CAACS,OAAO;QAAG;QAC5BC,QAAQ,EAAEV,QAAQ,CAACU,QAAQ,IAAI,EAAE;QAAG;QACpCC,QAAQ,EAAEX,QAAQ,CAACW,QAAQ;QAC3BC,OAAO,EAAEZ,QAAQ,CAACY,OAAO,IAAI,EAAE,CAAG;QAClC;MACF,CAAC,EACD;QACEC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUb,KAAK;QAChC;MACF,CACF,CAAC;;MAED;MACAc,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEd,QAAQ,CAACe,IAAI,CAAC;MAC3D,OAAOf,QAAQ,CAACe,IAAI,CAAC,CAAE;IACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZpB,QAAQ,CAAC,6CAA6C,CAAC;;MAEvD;MACAiB,OAAO,CAAClB,KAAK,CAAC,gBAAgB,EAAEqB,GAAG,CAAChB,QAAQ,GAAGgB,GAAG,CAAChB,QAAQ,CAACe,IAAI,GAAGC,GAAG,CAACC,OAAO,CAAC;;MAE/E;MACA,IAAID,GAAG,CAAChB,QAAQ,IAAIgB,GAAG,CAAChB,QAAQ,CAACe,IAAI,EAAE;QACrCnB,QAAQ,CAACoB,GAAG,CAAChB,QAAQ,CAACe,IAAI,CAACE,OAAO,IAAI,2BAA2B,CAAC;MACpE;;MAEA;MACA,MAAMD,GAAG;IACX,CAAC,SAAS;MACRtB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IAAEG,aAAa;IAAEJ,SAAS;IAAEE;EAAM,CAAC;AAC5C,CAAC;AAACH,EAAA,CApDID,gBAAgB;AAsDtB,eAAeA,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}