{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useAuth } from '../hooks/AuthContext'; // Importing the useAuth hook\n\nconst usePaymentCheckout = () => {\n  _s();\n  const {\n    authData\n  } = useAuth(); // Get auth data from context\n  const access_token = authData === null || authData === void 0 ? void 0 : authData.accessToken; // Extract access token from authData\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [checkoutUrl, setCheckoutUrl] = useState(null);\n  const [transactionId, setTransactionId] = useState(null);\n  const checkout = async quantity => {\n    setLoading(true);\n    setError(null);\n    if (!access_token) {\n      setError('Authentication token is missing. Please log in again.');\n      setLoading(false);\n      return;\n    }\n    try {\n      const response = await fetch('https://app.spiralreports.com/api/payments/checkout', {\n        method: 'POST',\n        // Using GET method as specified\n        headers: {\n          'Authorization': `Bearer ${access_token}`,\n          // Adding the Authorization header with the token\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          quantity\n        }) // Send quantity in the request body\n      });\n      const data = await response.json();\n      if (response.ok && data.statusCode === 200) {\n        setCheckoutUrl(data.data.url); // Get the URL for the checkout\n        setTransactionId(data.data.id); // Store the transaction ID for later use\n      } else {\n        throw new Error(data.message || 'An error occurred during payment checkout.');\n      }\n    } catch (err) {\n      setError(err.message); // Set the error message if any\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n  return {\n    loading,\n    error,\n    checkoutUrl,\n    transactionId,\n    checkout\n  };\n};\n_s(usePaymentCheckout, \"8KbxXvZjNA6w38/I2teZRGQpF3E=\", false, function () {\n  return [useAuth];\n});\nexport default usePaymentCheckout;","map":{"version":3,"names":["useState","useAuth","usePaymentCheckout","_s","authData","access_token","accessToken","loading","setLoading","error","setError","checkoutUrl","setCheckoutUrl","transactionId","setTransactionId","checkout","quantity","response","fetch","method","headers","body","JSON","stringify","data","json","ok","statusCode","url","id","Error","message","err"],"sources":["/Users/akmalkhan/chromablend/Spiralreports1/src/hooks/usePaymentCheckout.js"],"sourcesContent":["import { useState } from 'react';\nimport { useAuth } from '../hooks/AuthContext'; // Importing the useAuth hook\n\nconst usePaymentCheckout = () => {\n  const { authData } = useAuth(); // Get auth data from context\n  const access_token = authData?.accessToken; // Extract access token from authData\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [checkoutUrl, setCheckoutUrl] = useState(null);\n  const [transactionId, setTransactionId] = useState(null);\n\n  const checkout = async (quantity) => {\n    setLoading(true);\n    setError(null);\n\n    if (!access_token) {\n      setError('Authentication token is missing. Please log in again.');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const response = await fetch('https://app.spiralreports.com/api/payments/checkout', {\n        method: 'POST', // Using GET method as specified\n        headers: {\n          'Authorization': `Bearer ${access_token}`, // Adding the Authorization header with the token\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ quantity }), // Send quantity in the request body\n      });\n\n      const data = await response.json();\n\n      if (response.ok && data.statusCode === 200) {\n        setCheckoutUrl(data.data.url); // Get the URL for the checkout\n        setTransactionId(data.data.id); // Store the transaction ID for later use\n      } else {\n        throw new Error(data.message || 'An error occurred during payment checkout.');\n      }\n    } catch (err) {\n      setError(err.message); // Set the error message if any\n    } finally {\n      setLoading(false); // Stop loading\n    }\n  };\n\n  return {\n    loading,\n    error,\n    checkoutUrl,\n    transactionId,\n    checkout,\n  };\n};\n\nexport default usePaymentCheckout;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,OAAO,QAAQ,sBAAsB,CAAC,CAAC;;AAEhD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM;IAAEC;EAAS,CAAC,GAAGH,OAAO,CAAC,CAAC,CAAC,CAAC;EAChC,MAAMI,YAAY,GAAGD,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEE,WAAW,CAAC,CAAC;EAC5C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACW,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMe,QAAQ,GAAG,MAAOC,QAAQ,IAAK;IACnCR,UAAU,CAAC,IAAI,CAAC;IAChBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI,CAACL,YAAY,EAAE;MACjBK,QAAQ,CAAC,uDAAuD,CAAC;MACjEF,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,qDAAqD,EAAE;QAClFC,MAAM,EAAE,MAAM;QAAE;QAChBC,OAAO,EAAE;UACP,eAAe,EAAE,UAAUf,YAAY,EAAE;UAAE;UAC3C,cAAc,EAAE;QAClB,CAAC;QACDgB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEP;QAAS,CAAC,CAAC,CAAE;MACtC,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAIR,QAAQ,CAACS,EAAE,IAAIF,IAAI,CAACG,UAAU,KAAK,GAAG,EAAE;QAC1Cf,cAAc,CAACY,IAAI,CAACA,IAAI,CAACI,GAAG,CAAC,CAAC,CAAC;QAC/Bd,gBAAgB,CAACU,IAAI,CAACA,IAAI,CAACK,EAAE,CAAC,CAAC,CAAC;MAClC,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAACN,IAAI,CAACO,OAAO,IAAI,4CAA4C,CAAC;MAC/E;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZtB,QAAQ,CAACsB,GAAG,CAACD,OAAO,CAAC,CAAC,CAAC;IACzB,CAAC,SAAS;MACRvB,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IACLD,OAAO;IACPE,KAAK;IACLE,WAAW;IACXE,aAAa;IACbE;EACF,CAAC;AACH,CAAC;AAACZ,EAAA,CAlDID,kBAAkB;EAAA,QACDD,OAAO;AAAA;AAmD9B,eAAeC,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}