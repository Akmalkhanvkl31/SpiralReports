{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nconst useForgotPassword = () => {\n  _s();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n  const sendForgotPasswordRequest = async email => {\n    setIsSubmitting(true);\n    setErrorMessage('');\n    setSuccessMessage('');\n    try {\n      const response = await fetch('https://app.spiralreports.com/api/users/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (response.ok) {\n        const responseData = await response.json(); // parse response body if needed\n        setSuccessMessage('Password reset link has been sent to your email!');\n      } else {\n        // Error handling when response is not successful\n        const errorData = await response.json();\n        console.error('Error response data:', errorData); // Log the error data for debugging\n        setErrorMessage(errorData.message || 'Failed to send reset link. Please try again.');\n      }\n    } catch (error) {\n      console.error('API error:', error); // Log the error in the console\n      setErrorMessage('An error occurred. Please try again later.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  return {\n    isSubmitting,\n    errorMessage,\n    successMessage,\n    sendForgotPasswordRequest\n  };\n};\n_s(useForgotPassword, \"nsrcbrjzRUYncefhT5Rz1Jozm40=\");\nexport default useForgotPassword;","map":{"version":3,"names":["useState","useForgotPassword","_s","isSubmitting","setIsSubmitting","errorMessage","setErrorMessage","successMessage","setSuccessMessage","sendForgotPasswordRequest","email","response","fetch","method","headers","body","JSON","stringify","ok","responseData","json","errorData","console","error","message"],"sources":["/Users/akmalkhan/chromablend/Spiralreports1/src/hooks/useForgotPassword.js"],"sourcesContent":["import { useState } from 'react';\n\nconst useForgotPassword = () => {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  const sendForgotPasswordRequest = async (email) => {\n    setIsSubmitting(true);\n    setErrorMessage('');\n    setSuccessMessage('');\n\n    try {\n      const response = await fetch('https://app.spiralreports.com/api/users/forgot-password', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      if (response.ok) {\n        const responseData = await response.json(); // parse response body if needed\n        setSuccessMessage('Password reset link has been sent to your email!');\n      } else {\n        // Error handling when response is not successful\n        const errorData = await response.json();\n        console.error('Error response data:', errorData); // Log the error data for debugging\n        setErrorMessage(errorData.message || 'Failed to send reset link. Please try again.');\n      }\n    } catch (error) {\n      console.error('API error:', error); // Log the error in the console\n      setErrorMessage('An error occurred. Please try again later.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return {\n    isSubmitting,\n    errorMessage,\n    successMessage,\n    sendForgotPasswordRequest,\n  };\n};\n\nexport default useForgotPassword;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACK,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACO,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAExD,MAAMS,yBAAyB,GAAG,MAAOC,KAAK,IAAK;IACjDN,eAAe,CAAC,IAAI,CAAC;IACrBE,eAAe,CAAC,EAAE,CAAC;IACnBE,iBAAiB,CAAC,EAAE,CAAC;IAErB,IAAI;MACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,yDAAyD,EAAE;QACtFC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEP;QAAM,CAAC;MAChC,CAAC,CAAC;MAEF,IAAIC,QAAQ,CAACO,EAAE,EAAE;QACf,MAAMC,YAAY,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;QAC5CZ,iBAAiB,CAAC,kDAAkD,CAAC;MACvE,CAAC,MAAM;QACL;QACA,MAAMa,SAAS,GAAG,MAAMV,QAAQ,CAACS,IAAI,CAAC,CAAC;QACvCE,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEF,SAAS,CAAC,CAAC,CAAC;QAClDf,eAAe,CAACe,SAAS,CAACG,OAAO,IAAI,8CAA8C,CAAC;MACtF;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC,CAAC,CAAC;MACpCjB,eAAe,CAAC,4CAA4C,CAAC;IAC/D,CAAC,SAAS;MACRF,eAAe,CAAC,KAAK,CAAC;IACxB;EACF,CAAC;EAED,OAAO;IACLD,YAAY;IACZE,YAAY;IACZE,cAAc;IACdE;EACF,CAAC;AACH,CAAC;AAACP,EAAA,CA1CID,iBAAiB;AA4CvB,eAAeA,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}