{"ast":null,"code":"var _jsxFileName = \"/Users/akmalkhan/chromablend/Spiralreports1/src/hooks/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Use navigate in the context of the existing Router\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [authData, setAuthData] = useState(() => {\n    const storedData = localStorage.getItem('authData');\n    return storedData ? JSON.parse(storedData) : null;\n  });\n  const [otpResponse, setOtpResponse] = useState(null); // New state for OTP response\n  const [isRefreshing, setIsRefreshing] = useState(false); // To prevent multiple refresh calls\n  const navigate = useNavigate(); // Now safe to use useNavigate()\n\n  useEffect(() => {\n    // If authData exists, check if the access token is expired\n    if (authData && authData.accessToken) {\n      const isTokenExpired = checkTokenExpiry(authData.accessToken);\n      if (isTokenExpired) {\n        refreshToken(); // Call the refresh token function if expired\n      }\n    }\n  }, [authData]);\n\n  // Function to check if the JWT token is expired\n  const checkTokenExpiry = token => {\n    try {\n      const {\n        exp\n      } = JSON.parse(atob(token.split('.')[1])); // Decode the JWT payload\n      const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\n      return exp < currentTime; // Return true if the token is expired\n    } catch (e) {\n      console.error('Error checking token expiry:', e);\n      return true; // If decoding fails, assume expired\n    }\n  };\n\n  // Function to refresh the token if expired\n  const refreshToken = async () => {\n    if (isRefreshing || !(authData !== null && authData !== void 0 && authData.refreshToken) || !(authData !== null && authData !== void 0 && authData.userId)) {\n      return; // Prevent multiple refresh calls\n    }\n    setIsRefreshing(true);\n    try {\n      const response = await fetch('https://app.spiralreports.com/api/auth/user/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: authData.userId,\n          refreshToken: authData.refreshToken\n        })\n      });\n      if (response.ok) {\n        const data = await response.json();\n        if (data !== null && data !== void 0 && data.accessToken) {\n          // Successfully refreshed token\n          setAuthData(prevState => ({\n            ...prevState,\n            accessToken: data.accessToken\n          }));\n          localStorage.setItem('authData', JSON.stringify({\n            ...authData,\n            accessToken: data.accessToken\n          }));\n        } else {\n          // Handle case where there's no new access token returned\n          logoutAndRedirect();\n        }\n      } else {\n        // If refresh API call fails, log out and redirect to login page\n        logoutAndRedirect();\n      }\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      logoutAndRedirect();\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  // Helper function to log out and navigate to the login page\n  const logoutAndRedirect = () => {\n    setAuthData(null);\n    localStorage.removeItem('authData');\n    setOtpResponse(null); // Clear OTP response on logout\n    navigate('/login'); // Redirect to login page\n  };\n  const login = data => {\n    setAuthData(data);\n    localStorage.setItem('authData', JSON.stringify(data));\n  };\n  const logout = () => {\n    setAuthData(null);\n    localStorage.removeItem('authData');\n    setOtpResponse(null); // Clear OTP response on logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authData,\n      login,\n      setAuthData,\n      logout,\n      otpResponse,\n      setOtpResponse\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"iL5JQ7GnRoRY7Pcg04laqZxe5FM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authData","setAuthData","storedData","localStorage","getItem","JSON","parse","otpResponse","setOtpResponse","isRefreshing","setIsRefreshing","navigate","accessToken","isTokenExpired","checkTokenExpiry","refreshToken","token","exp","atob","split","currentTime","Math","floor","Date","now","e","console","error","userId","response","fetch","method","headers","body","stringify","ok","data","json","prevState","setItem","logoutAndRedirect","removeItem","login","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","undefined","Error","$RefreshReg$"],"sources":["/Users/akmalkhan/chromablend/Spiralreports1/src/hooks/AuthContext.js"],"sourcesContent":["// src/context/AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // Use navigate in the context of the existing Router\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [authData, setAuthData] = useState(() => {\n    const storedData = localStorage.getItem('authData');\n    return storedData ? JSON.parse(storedData) : null;\n  });\n\n  const [otpResponse, setOtpResponse] = useState(null); // New state for OTP response\n  const [isRefreshing, setIsRefreshing] = useState(false); // To prevent multiple refresh calls\n  const navigate = useNavigate(); // Now safe to use useNavigate()\n\n  useEffect(() => {\n    // If authData exists, check if the access token is expired\n    if (authData && authData.accessToken) {\n      const isTokenExpired = checkTokenExpiry(authData.accessToken);\n      if (isTokenExpired) {\n        refreshToken(); // Call the refresh token function if expired\n      }\n    }\n  }, [authData]);\n\n  // Function to check if the JWT token is expired\n  const checkTokenExpiry = (token) => {\n    try {\n      const { exp } = JSON.parse(atob(token.split('.')[1])); // Decode the JWT payload\n      const currentTime = Math.floor(Date.now() / 1000); // Current time in seconds\n      return exp < currentTime; // Return true if the token is expired\n    } catch (e) {\n      console.error('Error checking token expiry:', e);\n      return true; // If decoding fails, assume expired\n    }\n  };\n\n  // Function to refresh the token if expired\n  const refreshToken = async () => {\n    if (isRefreshing || !authData?.refreshToken || !authData?.userId) {\n      return; // Prevent multiple refresh calls\n    }\n\n    setIsRefreshing(true);\n\n    try {\n      const response = await fetch('https://app.spiralreports.com/api/auth/user/refresh', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          userId: authData.userId,\n          refreshToken: authData.refreshToken,\n        }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        if (data?.accessToken) {\n          // Successfully refreshed token\n          setAuthData((prevState) => ({\n            ...prevState,\n            accessToken: data.accessToken,\n          }));\n          localStorage.setItem(\n            'authData',\n            JSON.stringify({ ...authData, accessToken: data.accessToken })\n          );\n        } else {\n          // Handle case where there's no new access token returned\n          logoutAndRedirect();\n        }\n      } else {\n        // If refresh API call fails, log out and redirect to login page\n        logoutAndRedirect();\n      }\n    } catch (error) {\n      console.error('Error refreshing token:', error);\n      logoutAndRedirect();\n    } finally {\n      setIsRefreshing(false);\n    }\n  };\n\n  // Helper function to log out and navigate to the login page\n  const logoutAndRedirect = () => {\n    setAuthData(null);\n    localStorage.removeItem('authData');\n    setOtpResponse(null); // Clear OTP response on logout\n    navigate('/login'); // Redirect to login page\n  };\n\n  const login = (data) => {\n    setAuthData(data);\n    localStorage.setItem('authData', JSON.stringify(data));\n  };\n\n  const logout = () => {\n    setAuthData(null);\n    localStorage.removeItem('authData');\n    setOtpResponse(null); // Clear OTP response on logout\n  };\n\n  return (\n    <AuthContext.Provider value={{ authData, login, setAuthData, logout, otpResponse, setOtpResponse }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}